1. **useState**: Manages the state of a variable. React doesn't automatically re-render for variable changes unless `useState` is used. It ensures React knows when the state changes and re-renders the component accordingly.

2. **useCallback**: Optimizes performance by memoizing functions. If a function causes unnecessary re-renders, `useCallback` ensures the function isn't recreated unless its dependencies change.

3. **useEffect**: Runs a function whenever specified dependencies change. Unlike `useCallback`, which prevents re-renders, `useEffect` ensures the function runs with every change in dependencies.

4. **useRef**: References a DOM element, like an input tag, without directly manipulating the DOM. It allows you to access and interact with the element inside and outside the component's return.

5. **useId**: This hook generates unique id's and is used by "FAANG" companies in the production level grade so it is a good programming practice to use it in your code for generating id's.

6. **useLoaderData**: This hook enables you to do some pre-processing and save your time ,you first do your processing in a function and in the loader tag of the Route place that function ,then use the  hook function in the component by calling it and getting the pre-processed data from it in a way data=useLoaderData(); ,and then use it.

7. **useContext**: This hook helps you use the global variables you created in the context so that you don't have to do prop drilling ,but to use this you have to first create a context then wrap all the nodes in the App/Main whenever you like in the contextProvider and define your states or variables that you want to be accessible in all the child nodes ,anf then just use the useContext hook to fetch those variables and use them. 